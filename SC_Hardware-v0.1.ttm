// Part of Star_Citizen_Zeplin_Profile#.# keybinds packages
//---------------------------------------------------------------------------
//                      
//---------------------------------------------------------------------------
//---------------------------External Voice PTT Key-__-----------------------
//  The should not be changed as it COULD CAUSE UNINDTENDED RESULTS. It is recomended to leave it as it is and add and extra PTT key in the VoIP software. 

define Ext_Voice            USB[0x48]       //default is pause/break 'USB[0x48]' to activate external voice comms such as Discord/TeamSpeak. 

//---------------------------------------------------------------------------
int initJoyMapAxis(){//Map Axis DX Values
    //Joystick
    MapAxis(&Joystick, JOYX, DX_X_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);     
    MapAxis(&Joystick, JOYY, DX_Y_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);  
}
int initFootMapAxis(){
    //FootPeadls
    if (TFRPedalUsage){
        MapAxis(&TFRPRudder, TRUDDER, DX_Z_AXIS,AXIS_NORMAL,MAP_ABSOLUTE);
        //MapAxis(&TFRPRudder, TRPLEFT, 0,AXIS_NORMAL,MAP_ABSOLUTE);
        //MapAxis(&TFRPRudder, TRPRIGHT, 0,AXIS_NORMAL,MAP_ABSOLUTE);
    }
}

int initThrottleMapAxis(){
    //Throttle
    MapAxis(&Throttle, SCX, DX_Z_AXIS, AXIS_REVERSED, MAP_ABSOLUTE);
    //MapAxis(&Throttle, SCY, 0, AXIS_NORMAL, MAP_ABSOLUTE);
    MapAxis(&Throttle, THR_RIGHT, DX_THROTTLE_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
    MapAxis(&Throttle, THR_LEFT, DX_SLIDER_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
    MapAxis(&Throttle, THR_FC, DX_ZROT_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
}

int startThrottleProfMap(){//initial throttle curve maps
    if(Verbose) {printf("Starting Axis configuration...\xa");}
    if (Throttle[FLAPU]) ActKey(KEYON+PULSE+FlapThrUp);
    else if (Throttle[FLAPM]) ActKey(KEYON+PULSE+FlapThrMid);
    else ActKey(KEYON+PULSE+FlapThrDown);
}

int startJoyProfMap(){//initial joystick curve maps
    if(Verbose) {printf("Starting Axis configuration...\xa");}
    if(Throttle[APPAT])ActKey(KEYON+PULSE+APPathUp);
    else if(Throttle[APAH])ActKey(KEYON+PULSE+APAltHdgMid);
    else ActKey(KEYON+PULSE+APAAltDown);
}
  
int setJoystickCurves(){//Joystick and foot curve setting
    SetFlat = EXEC("JoyAxisCurveSet(0);""FootSCurve(0);""initSlewControl(0);""if(Verbose) printf(\"Joystcik Profile: Flat/linear \\x0a \");");
    SetProg = EXEC("JoyAxisCurveSet(1);""FootSCurve(1);""initSlewControl(1);""if(Verbose) printf(\"Joystcik Profile: Progressive \\x0a \");");
    SetPrec = EXEC("JoyAxisCurveSet(2);""FootSCurve(2);""initSlewControl(2);""if(Verbose) printf(\"Joystcik Profile: Percision \\x0a \");");
}

int setThrottleCurves(){
    //single direction throttle modes in one axis REQUIRES reverse/forward 'toggle'
    SetForwardThrOnly = EXEC("TrimDXAxis(DX_THROTTLE_AXIS, SET(-1024));" // Flat
                            "RJCurveThrSet(0);"
                            "LeftFollowCurve(0,-1024,0);"
                            "FricSliderFollowCurve(0,-1024,0);"
                            "if(Verbose) printf(\"Throttle Profile: FORWARD ONLY [0 -> 100] \\x0a \");"
                            "SetThrottle();");
    SetForeNonLinThr = EXEC("TrimDXAxis(DX_THROTTLE_AXIS, SET(-1024));" //Progresive
                            "RCCurveThrSet(AxisCurveProg);"
                            "LeftCustCurve(AxisCurveProg,-1024);"
                            "FricSliderCustCurve(AxisCurveProg,-1024);"
                            "if(Verbose) printf(\"Throttle Profile: Progressive Forward Only [0 -> 100] \\x0a \");"
                            "SetThrottle();");
    SetThrPrecison = EXEC("TrimDXAxis(DX_THROTTLE_AXIS, SET(-1024));" //Percision
                            "LeftCustCurve(AxisCurvePrecision,-1024);"
                            "FricSliderCustCurve(AxisCurvePrecision,-1024);"
                            "if(Verbose) printf(\"Throttle Profile: Percision Forward Only [0 -> 40] \\x0a \");"
                            "SetThrottle();");
    //Dual forward/reverse mode in one axis DOES NOT require reverse/forward 'toggle'
    SetDualFlat = EXEC("TrimDXAxis(DX_THROTTLE_AXIS, SET(0));" //Flat
                            "RSCurveThrSet(0);"
                            "LeftFollowCurve(0,0,1);"
                            "FricSliderFollowCurve(0,0,1);"
                            "if(Verbose) printf(\"Throttle Profile: Forward/Reverse [-100 -> 100] \\x0a \");"
                            "SetThrottle();");
    SetDualProg = EXEC("TrimDXAxis(DX_THROTTLE_AXIS, SET(0));" //Progresive
                            "RSCurveThrSet(1);"
                            "LeftFollowCurve(1,0,1);"
                            "FricSliderFollowCurve(1,0,1);"
                            "if(Verbose) printf(\"Throttle Profile: Progresive Forward/Reverse [-100 -> 100] \\x0a \");"
                            "SetThrottle();");
    SetDualPerc = EXEC("TrimDXAxis(DX_THROTTLE_AXIS, SET(0));" //Percision
                            "RSCurveThrSet(2);"
                            "LeftFollowCurve(2,0,1);"
                            "FricSliderFollowCurve(2,0,1);"
                            "if(Verbose) printf(\"Throttle Profile: Percision Forward/Reverse [-50 -> 50] \\x0a \");"
                            "SetThrottle();");
}

int warthogJoyBinds(){//Keybindings for the Warthog Joysick key assignments.
    //Main Fire group 1 half group 1+2 full
    MapKeyIO(&Joystick,TG1,ScanFire,FireHalf);
    MapKey(&Joystick,TG2,FireFull);
    
    //Missles and Counter meastures
    MapKey(&Joystick,S1,TEMPO(PULSE+CycleCounter,PULSE+LaunchCounter,DLong));
    MapKey(&Joystick,S2,TEMPO(PULSE+MissleLock,MissleLock,DLong));
    
    //Targeting Binds
    MapKey(&Joystick,H2U,TEMPO(PULSE+TargetRegticle,PULSE+TargetFCycle,DLong*2));
    MapKey(&Joystick,H2D,FireFull); // allows direct access to fire group 2
    MapKey(&Joystick,H2L,TEMPO(PULSE+TargetECycle,PULSE+TargetECycleR,DShort));
    MapKey(&Joystick,H2R,PULSE+TargetRelease);
    
    //Power Distrbution
    MapKey(&Joystick,H3U,PULSE+PReset);
    MapKey(&Joystick,H3D,PULSE+PThrust);
    MapKey(&Joystick,H3L,PULSE+PWeapons);
    MapKey(&Joystick,H3R,PULSE+PShields);
    
    SetShiftButton(&Joystick,S4);//  ****************Reserved shift function
    //MapKey(&Joystick,S3,0);
    if(Verbose) printf("Joystick Keybinds Loaded\x0a ");
}
    
int warthogThrottleBinds(){//Keybindings for the Warthog Throttle key assignments.
    //head tracking 
    MapKey(&Throttle,EOLIGN,TEMPO(PULSE+HeadTrack,PULSE+HeadCal,DLong));
        
    //Light and Gear
    MapKey(&Throttle,EACON,PULSE+LandingGear);
    MapKeyR(&Throttle,EACON,PULSE+LandingGear);
    MapKey(&Throttle,APUON,PULSE+Lights);
    MapKeyR(&Throttle,APUON,PULSE+Lights);
    
    //Thrusters flight control
    MapKey(&Throttle,CSU,ThrustUp);
    MapKey(&Throttle,CSD,ThrustDown);
    MapKey(&Throttle,CSL,ThrustLeft);
    MapKey(&Throttle,CSR,ThrustRight);
    
    MapKey(&Throttle,MSR,EXEC("mForBurst();"));
    MapKey(&Throttle,MSL,EXEC("mAftBurst();"));
    
    //Mobiglas toggle for brakes
    MapKey(&Throttle,BSF,Brakes);
    MapKey(&Throttle,BSB,PULSE+Mobiglas);
    MapKeyR(&Throttle,BSB,PULSE+Mobiglas);
    
    //decouple flight set binds as non-toggle
    MapKey(&Throttle,SPDF,Decouple);
    MapKey(&Throttle,SPDM,0);
    MapKey(&Throttle,SPDB,Decouple);
    
    //General Flight readyness
    MapKey(&Throttle,LDGH,VTOL);
    MapKey(&Throttle,SC,Afterburner);
    MapKey(&Throttle,LTB,Brakes);
    
    //Power Control
    MapKey(&Throttle,RDRNRM,PULSE+FlighReady);
    MapKey(&Throttle,RDRDIS,PULSE+PowerAll);
    
    //Throttle mods and Quantum jump
    MapKey(&Throttle,CHF,TEMPO(PULSE+QJump,QJump,DShort));
    MapKey(&Throttle,CHB,TEMPO(0,ThrottleReverse,DShort));
    
    //door control call
	MapKey(&Throttle, APENG, TEMPO(EXEC("DLSet = 1;" "initDoorManagment();"),EXEC("DLSet = 2;" "initDoorManagment();"),DLong));
	
	//voice comms
	MapKey(&Throttle,PSF,EXEC("extComms();"));
	MapKey(&Throttle,PSM,EXEC("intProxComms();"));
	MapKey(&Throttle,PSB,EXEC("intComms();"));	
	
	//mining calls
	MapKey(&Throttle,EORIGN,TEMPO(PULSE+MineFracHarv,PULSE+MineMode,DShort));
	
	//Joystick Curve Selection 3 profles in order Flat,Progresive,Precision
	MapKey(&Throttle,APPAT,   EXEC("ActKey(KEYON+PULSE+APPathUp);"));
    MapKey(&Throttle,APAH,    EXEC("ActKey(KEYON+PULSE+APAltHdgMid);"));
    MapKey(&Throttle,APALT,   EXEC("ActKey(KEYON+PULSE+APAltDown);"));
	
	//Right throttle curve settings 3 profles in order Flat,Progresive,Precision
    MapKey(&Throttle, FLAPU,  EXEC("ActKey(KEYON+PULSE+FlapThrUp);"));     // Flaps UP throttle mode
	MapKey(&Throttle, FLAPM,  EXEC("ActKey(KEYON+PULSE+FlapThrMid);"));    // Flaps MIDDLE throttle mode
	MapKey(&Throttle, FLAPD,  EXEC("ActKey(KEYON+PULSE+FlapThrDown);"));   // Flaps DOWN throttle mode
	
	//Throttle Zeroing on stops
	MapKey(&Throttle, IDLERON, EXEC("initZeroIdle();""if(Verbose)printf(\"IDLE Lock: ENGAGED\\xa\");"));//idle lock engagement
	MapKeyR(&Throttle,IDLERON, EXEC("initZeroIdle();""if(Verbose)printf(\"IDLE Lock: DISENGAGED\\xa\");"));//idle lock engagement
	
    //open functions	
    //MapKey(&Throttle,MSP,0);      ****************Rserved Voice Comm PTT
    //MapKey(&Throttle, APDIS, 0);  ****************Reserved for door managment
    MapKey(&Throttle,EFLNORM,0);
    MapKey(&Throttle,EFLOVER,0);
    MapKey(&Throttle,EFRNORM,0);
    MapKey(&Throttle,EFROVER,0);
    MapKey(&Throttle,APUOFF,0);
    MapKey(&Throttle,MSU,0);
    MapKey(&Throttle,MSD,0);
    MapKey(&Throttle,EORMOTOR,0);
    MapKey(&Throttle,EOLMOTOR,0);
    if(Verbose) printf("Throttle Keybinds Loaded\x0a ");
}